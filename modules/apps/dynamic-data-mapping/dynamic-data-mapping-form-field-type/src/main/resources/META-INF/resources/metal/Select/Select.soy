{namespace Select}

{template .render}
	{@param spritemap: string}
	{@param strings: [chooseAnOption: string]}
	{@param? _handleClick: any}
	{@param? _handleItemClicked: any}
	{@param? dataSourceType: string}
	{@param? disableEmptyOption: bool}
	{@param? fixedOptions: list<[
		label: string,
		value: string
	]>}
	{@param? id: string}
	{@param? label: string}
	{@param? open: bool}
	{@param? options: list<[
		label: string,
		value: string
	]>}
	{@param? placeholder: string}
	{@param? predefinedValue: string}
	{@param? readOnly: bool}
	{@param? repeatable: bool}
	{@param? required: bool}
	{@param? selectedLabel: string}
	{@param? showLabel: bool}
	{@param? tip: string}

	{call FieldBase.render}
		{param contentRenderer kind="html"}
			{call .content}
				{param _handleClick: $_handleClick /}
				{param _handleItemClicked: $_handleItemClicked /}
				{param dataSourceType: $dataSourceType /}
				{param id: $id /}
				{param options: $options /}
				{param predefinedValue: $predefinedValue /}
				{param readOnly: $readOnly /}
				{param selectedLabel: $selectedLabel /}
				{param spritemap: $spritemap /}
				{param strings: $strings /}
			{/call}
		{/param}
		{param label: $label /}
		{param repeatable: $repeatable /}
		{param required: $required /}
		{param showLabel: $showLabel /}
		{param spritemap: $spritemap /}
		{param tip: $tip /}
	{/call}
{/template}

{template .content}
	{@param spritemap: string}
	{@param strings: [chooseAnOption: string]}
	{@param? _handleClick: any}
	{@param? _handleItemClicked: any}
	{@param? dataSourceType: string}
	{@param? disableEmptyOption: bool}
	{@param? fixedOptions: list<[
		label: string,
		value: string
	]>}
	{@param? id: string}
	{@param? open: bool}
	{@param? options: list<[
		label: string,
		value: string
	]>}
	{@param? placeholder: string}
	{@param? readOnly: bool}
	{@param? selectedLabel: string}

	{call .listItems}
		{param _handleItemClicked: $_handleItemClicked /}
		{param _handleClick: $_handleClick /}
		{param dataSourceType: $dataSourceType /}
		{param id: $id /}
		{param readOnly: $readOnly /}
		{param options: $options /}
		{param selectedLabel: $selectedLabel /}
		{param spritemap: $spritemap /}
		{param strings: $strings /}
	{/call}
{/template}

{template .listItems}
	{@param spritemap: string}
	{@param strings: [chooseAnOption: string]}
	{@param? _handleClick: any}
	{@param? _handleItemClicked: any}
	{@param? disableEmptyOption: bool}
	{@param? fixedOptions: list<[
		label: string,
		value: string
	]>}
	{@param? open: bool}
	{@param? options: list<[
		label: string,
		value: string
	]>}
	{@param? placeholder: string}
	{@param? readOnly: bool}
	{@param? selectedLabel: string}

	{let $attributes kind="attributes"}
		class="dropdown-menu

		{if $open}
			{sp}dropdown-opened
		{/if}
		"
		data-onclick="{$_handleItemClicked}"

	{/let}

	{if $options}
		{let $attributes kind="attributes"}
			class="form-control select-field-trigger"

			{if $id}
				id="{$id}"
			{/if}

			{if $readOnly}
				disabled
			{else}
				data-onclick="{$_handleClick}"
			{/if}
		{/let}

		{let $trigger kind="html"}
			<div class="form-builder-select-field input-group-container">
				<div {$attributes}>
					{if $selectedLabel}
						<div class="option-selected">{$selectedLabel}</div>
					{else}
						<div class="option-selected option-selected-placeholder">{$strings.chooseAnOption}</div>
					{/if}

					<a class="select-arrow-down-container" href="javascript:;">
						{if $spritemap}
							{call ClayIcon.render}
								{param spritemap: $spritemap /}
								{param symbol: 'caret-double' /}
							{/call}
						{/if}
					</a>
				</div>
			</div>
		{/let}

		{call ClayDropdownBase.render}
			{param disabled: $readOnly /}
			{param events: [
				'itemClicked': $_handleItemClicked
			]/}
			{param elementClasses: 'ddm-btn-full' /}
			{param items: $options /}
			{param searchable: length($options) > 6 ? true : false /}
			{param spritemap: $spritemap /}
			{param label: $trigger /}
		{/call}
	{/if}
{/template}