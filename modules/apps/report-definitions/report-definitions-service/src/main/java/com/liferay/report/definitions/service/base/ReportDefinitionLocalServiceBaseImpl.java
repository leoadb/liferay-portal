/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.report.definitions.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.exportimport.kernel.lar.ExportImportHelperUtil;
import com.liferay.exportimport.kernel.lar.ManifestSummary;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;
import com.liferay.report.definitions.model.ReportDefinition;
import com.liferay.report.definitions.service.ReportDefinitionLocalService;
import com.liferay.report.definitions.service.persistence.ReportDefinitionPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the report definition local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.report.definitions.service.impl.ReportDefinitionLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.liferay.report.definitions.service.impl.ReportDefinitionLocalServiceImpl
 * @generated
 */
@ProviderType
public abstract class ReportDefinitionLocalServiceBaseImpl
	extends BaseLocalServiceImpl
	implements ReportDefinitionLocalService, IdentifiableOSGiService {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Use <code>ReportDefinitionLocalService</code> via injection or a <code>org.osgi.util.tracker.ServiceTracker</code> or use <code>com.liferay.report.definitions.service.ReportDefinitionLocalServiceUtil</code>.
	 */

	/**
	 * Adds the report definition to the database. Also notifies the appropriate model listeners.
	 *
	 * @param reportDefinition the report definition
	 * @return the report definition that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ReportDefinition addReportDefinition(
		ReportDefinition reportDefinition) {

		reportDefinition.setNew(true);

		return reportDefinitionPersistence.update(reportDefinition);
	}

	/**
	 * Creates a new report definition with the primary key. Does not add the report definition to the database.
	 *
	 * @param reportDefinitionId the primary key for the new report definition
	 * @return the new report definition
	 */
	@Override
	@Transactional(enabled = false)
	public ReportDefinition createReportDefinition(long reportDefinitionId) {
		return reportDefinitionPersistence.create(reportDefinitionId);
	}

	/**
	 * Deletes the report definition with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param reportDefinitionId the primary key of the report definition
	 * @return the report definition that was removed
	 * @throws PortalException if a report definition with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ReportDefinition deleteReportDefinition(long reportDefinitionId)
		throws PortalException {

		return reportDefinitionPersistence.remove(reportDefinitionId);
	}

	/**
	 * Deletes the report definition from the database. Also notifies the appropriate model listeners.
	 *
	 * @param reportDefinition the report definition
	 * @return the report definition that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ReportDefinition deleteReportDefinition(
		ReportDefinition reportDefinition) {

		return reportDefinitionPersistence.remove(reportDefinition);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(
			ReportDefinition.class, clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return reportDefinitionPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>com.liferay.report.definitions.model.impl.ReportDefinitionModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end) {

		return reportDefinitionPersistence.findWithDynamicQuery(
			dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>com.liferay.report.definitions.model.impl.ReportDefinitionModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator<T> orderByComparator) {

		return reportDefinitionPersistence.findWithDynamicQuery(
			dynamicQuery, start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return reportDefinitionPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(
		DynamicQuery dynamicQuery, Projection projection) {

		return reportDefinitionPersistence.countWithDynamicQuery(
			dynamicQuery, projection);
	}

	@Override
	public ReportDefinition fetchReportDefinition(long reportDefinitionId) {
		return reportDefinitionPersistence.fetchByPrimaryKey(
			reportDefinitionId);
	}

	/**
	 * Returns the report definition matching the UUID and group.
	 *
	 * @param uuid the report definition's UUID
	 * @param groupId the primary key of the group
	 * @return the matching report definition, or <code>null</code> if a matching report definition could not be found
	 */
	@Override
	public ReportDefinition fetchReportDefinitionByUuidAndGroupId(
		String uuid, long groupId) {

		return reportDefinitionPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the report definition with the primary key.
	 *
	 * @param reportDefinitionId the primary key of the report definition
	 * @return the report definition
	 * @throws PortalException if a report definition with the primary key could not be found
	 */
	@Override
	public ReportDefinition getReportDefinition(long reportDefinitionId)
		throws PortalException {

		return reportDefinitionPersistence.findByPrimaryKey(reportDefinitionId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery =
			new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(
			reportDefinitionLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(ReportDefinition.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("reportDefinitionId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery
		getIndexableActionableDynamicQuery() {

		IndexableActionableDynamicQuery indexableActionableDynamicQuery =
			new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(
			reportDefinitionLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(ReportDefinition.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"reportDefinitionId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {

		actionableDynamicQuery.setBaseLocalService(
			reportDefinitionLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(ReportDefinition.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("reportDefinitionId");
	}

	@Override
	public ExportActionableDynamicQuery getExportActionableDynamicQuery(
		final PortletDataContext portletDataContext) {

		final ExportActionableDynamicQuery exportActionableDynamicQuery =
			new ExportActionableDynamicQuery() {

				@Override
				public long performCount() throws PortalException {
					ManifestSummary manifestSummary =
						portletDataContext.getManifestSummary();

					StagedModelType stagedModelType = getStagedModelType();

					long modelAdditionCount = super.performCount();

					manifestSummary.addModelAdditionCount(
						stagedModelType, modelAdditionCount);

					long modelDeletionCount =
						ExportImportHelperUtil.getModelDeletionCount(
							portletDataContext, stagedModelType);

					manifestSummary.addModelDeletionCount(
						stagedModelType, modelDeletionCount);

					return modelAdditionCount;
				}

			};

		initActionableDynamicQuery(exportActionableDynamicQuery);

		exportActionableDynamicQuery.setAddCriteriaMethod(
			new ActionableDynamicQuery.AddCriteriaMethod() {

				@Override
				public void addCriteria(DynamicQuery dynamicQuery) {
					portletDataContext.addDateRangeCriteria(
						dynamicQuery, "modifiedDate");
				}

			});

		exportActionableDynamicQuery.setCompanyId(
			portletDataContext.getCompanyId());

		exportActionableDynamicQuery.setPerformActionMethod(
			new ActionableDynamicQuery.PerformActionMethod<ReportDefinition>() {

				@Override
				public void performAction(ReportDefinition reportDefinition)
					throws PortalException {

					StagedModelDataHandlerUtil.exportStagedModel(
						portletDataContext, reportDefinition);
				}

			});
		exportActionableDynamicQuery.setStagedModelType(
			new StagedModelType(
				PortalUtil.getClassNameId(ReportDefinition.class.getName())));

		return exportActionableDynamicQuery;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {

		return reportDefinitionLocalService.deleteReportDefinition(
			(ReportDefinition)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {

		return reportDefinitionPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns all the report definitions matching the UUID and company.
	 *
	 * @param uuid the UUID of the report definitions
	 * @param companyId the primary key of the company
	 * @return the matching report definitions, or an empty list if no matches were found
	 */
	@Override
	public List<ReportDefinition> getReportDefinitionsByUuidAndCompanyId(
		String uuid, long companyId) {

		return reportDefinitionPersistence.findByUuid_C(uuid, companyId);
	}

	/**
	 * Returns a range of report definitions matching the UUID and company.
	 *
	 * @param uuid the UUID of the report definitions
	 * @param companyId the primary key of the company
	 * @param start the lower bound of the range of report definitions
	 * @param end the upper bound of the range of report definitions (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the range of matching report definitions, or an empty list if no matches were found
	 */
	@Override
	public List<ReportDefinition> getReportDefinitionsByUuidAndCompanyId(
		String uuid, long companyId, int start, int end,
		OrderByComparator<ReportDefinition> orderByComparator) {

		return reportDefinitionPersistence.findByUuid_C(
			uuid, companyId, start, end, orderByComparator);
	}

	/**
	 * Returns the report definition matching the UUID and group.
	 *
	 * @param uuid the report definition's UUID
	 * @param groupId the primary key of the group
	 * @return the matching report definition
	 * @throws PortalException if a matching report definition could not be found
	 */
	@Override
	public ReportDefinition getReportDefinitionByUuidAndGroupId(
			String uuid, long groupId)
		throws PortalException {

		return reportDefinitionPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the report definitions.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>com.liferay.report.definitions.model.impl.ReportDefinitionModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of report definitions
	 * @param end the upper bound of the range of report definitions (not inclusive)
	 * @return the range of report definitions
	 */
	@Override
	public List<ReportDefinition> getReportDefinitions(int start, int end) {
		return reportDefinitionPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of report definitions.
	 *
	 * @return the number of report definitions
	 */
	@Override
	public int getReportDefinitionsCount() {
		return reportDefinitionPersistence.countAll();
	}

	/**
	 * Updates the report definition in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param reportDefinition the report definition
	 * @return the report definition that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ReportDefinition updateReportDefinition(
		ReportDefinition reportDefinition) {

		return reportDefinitionPersistence.update(reportDefinition);
	}

	/**
	 * Returns the report definition local service.
	 *
	 * @return the report definition local service
	 */
	public ReportDefinitionLocalService getReportDefinitionLocalService() {
		return reportDefinitionLocalService;
	}

	/**
	 * Sets the report definition local service.
	 *
	 * @param reportDefinitionLocalService the report definition local service
	 */
	public void setReportDefinitionLocalService(
		ReportDefinitionLocalService reportDefinitionLocalService) {

		this.reportDefinitionLocalService = reportDefinitionLocalService;
	}

	/**
	 * Returns the report definition persistence.
	 *
	 * @return the report definition persistence
	 */
	public ReportDefinitionPersistence getReportDefinitionPersistence() {
		return reportDefinitionPersistence;
	}

	/**
	 * Sets the report definition persistence.
	 *
	 * @param reportDefinitionPersistence the report definition persistence
	 */
	public void setReportDefinitionPersistence(
		ReportDefinitionPersistence reportDefinitionPersistence) {

		this.reportDefinitionPersistence = reportDefinitionPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService
		getCounterLocalService() {

		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService
			counterLocalService) {

		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService
		getUserLocalService() {

		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {

		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register(
			"com.liferay.report.definitions.model.ReportDefinition",
			reportDefinitionLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.liferay.report.definitions.model.ReportDefinition");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return ReportDefinitionLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return ReportDefinition.class;
	}

	protected String getModelClassName() {
		return ReportDefinition.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = reportDefinitionPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(
				dataSource, sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = ReportDefinitionLocalService.class)
	protected ReportDefinitionLocalService reportDefinitionLocalService;

	@BeanReference(type = ReportDefinitionPersistence.class)
	protected ReportDefinitionPersistence reportDefinitionPersistence;

	@ServiceReference(
		type = com.liferay.counter.kernel.service.CounterLocalService.class
	)
	protected com.liferay.counter.kernel.service.CounterLocalService
		counterLocalService;

	@ServiceReference(
		type = com.liferay.portal.kernel.service.UserLocalService.class
	)
	protected com.liferay.portal.kernel.service.UserLocalService
		userLocalService;

	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;

	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry
		persistedModelLocalServiceRegistry;

}