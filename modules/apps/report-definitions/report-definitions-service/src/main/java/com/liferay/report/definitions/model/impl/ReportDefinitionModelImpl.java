/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.report.definitions.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import com.liferay.report.definitions.model.ReportDefinition;
import com.liferay.report.definitions.model.ReportDefinitionModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ReportDefinition service. Represents a row in the &quot;ReportDefinition&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ReportDefinitionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ReportDefinitionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ReportDefinitionImpl
 * @see ReportDefinition
 * @see ReportDefinitionModel
 * @generated
 */
@ProviderType
public class ReportDefinitionModelImpl extends BaseModelImpl<ReportDefinition>
	implements ReportDefinitionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a report definition model instance should use the {@link ReportDefinition} interface instead.
	 */
	public static final String TABLE_NAME = "ReportDefinition";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "reportDefinitionId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "columnsDDMContentId", Types.BIGINT },
			{ "dataDefinitionId", Types.BIGINT },
			{ "description", Types.VARCHAR },
			{ "name", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("reportDefinitionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("columnsDDMContentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dataDefinitionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table ReportDefinition (uuid_ VARCHAR(75) null,reportDefinitionId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,columnsDDMContentId LONG,dataDefinitionId LONG,description VARCHAR(75) null,name VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table ReportDefinition";
	public static final String ORDER_BY_JPQL = " ORDER BY reportDefinition.name ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ReportDefinition.name ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(report.definitions.com.liferay.report.definitions.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.report.definitions.model.ReportDefinition"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(report.definitions.com.liferay.report.definitions.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.report.definitions.model.ReportDefinition"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(report.definitions.com.liferay.report.definitions.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.report.definitions.model.ReportDefinition"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long GROUPID_COLUMN_BITMASK = 2L;
	public static final long UUID_COLUMN_BITMASK = 4L;
	public static final long NAME_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(report.definitions.com.liferay.report.definitions.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.report.definitions.model.ReportDefinition"));

	public ReportDefinitionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _reportDefinitionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setReportDefinitionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _reportDefinitionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ReportDefinition.class;
	}

	@Override
	public String getModelClassName() {
		return ReportDefinition.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("reportDefinitionId", getReportDefinitionId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("columnsDDMContentId", getColumnsDDMContentId());
		attributes.put("dataDefinitionId", getDataDefinitionId());
		attributes.put("description", getDescription());
		attributes.put("name", getName());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long reportDefinitionId = (Long)attributes.get("reportDefinitionId");

		if (reportDefinitionId != null) {
			setReportDefinitionId(reportDefinitionId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long columnsDDMContentId = (Long)attributes.get("columnsDDMContentId");

		if (columnsDDMContentId != null) {
			setColumnsDDMContentId(columnsDDMContentId);
		}

		Long dataDefinitionId = (Long)attributes.get("dataDefinitionId");

		if (dataDefinitionId != null) {
			setDataDefinitionId(dataDefinitionId);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getReportDefinitionId() {
		return _reportDefinitionId;
	}

	@Override
	public void setReportDefinitionId(long reportDefinitionId) {
		_reportDefinitionId = reportDefinitionId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getColumnsDDMContentId() {
		return _columnsDDMContentId;
	}

	@Override
	public void setColumnsDDMContentId(long columnsDDMContentId) {
		_columnsDDMContentId = columnsDDMContentId;
	}

	@Override
	public long getDataDefinitionId() {
		return _dataDefinitionId;
	}

	@Override
	public void setDataDefinitionId(long dataDefinitionId) {
		_dataDefinitionId = dataDefinitionId;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask = -1L;

		_name = name;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				ReportDefinition.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ReportDefinition.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ReportDefinition toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ReportDefinition)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ReportDefinitionImpl reportDefinitionImpl = new ReportDefinitionImpl();

		reportDefinitionImpl.setUuid(getUuid());
		reportDefinitionImpl.setReportDefinitionId(getReportDefinitionId());
		reportDefinitionImpl.setGroupId(getGroupId());
		reportDefinitionImpl.setCompanyId(getCompanyId());
		reportDefinitionImpl.setUserId(getUserId());
		reportDefinitionImpl.setUserName(getUserName());
		reportDefinitionImpl.setCreateDate(getCreateDate());
		reportDefinitionImpl.setModifiedDate(getModifiedDate());
		reportDefinitionImpl.setColumnsDDMContentId(getColumnsDDMContentId());
		reportDefinitionImpl.setDataDefinitionId(getDataDefinitionId());
		reportDefinitionImpl.setDescription(getDescription());
		reportDefinitionImpl.setName(getName());

		reportDefinitionImpl.resetOriginalValues();

		return reportDefinitionImpl;
	}

	@Override
	public int compareTo(ReportDefinition reportDefinition) {
		int value = 0;

		value = getName().compareTo(reportDefinition.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ReportDefinition)) {
			return false;
		}

		ReportDefinition reportDefinition = (ReportDefinition)obj;

		long primaryKey = reportDefinition.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ReportDefinitionModelImpl reportDefinitionModelImpl = this;

		reportDefinitionModelImpl._originalUuid = reportDefinitionModelImpl._uuid;

		reportDefinitionModelImpl._originalGroupId = reportDefinitionModelImpl._groupId;

		reportDefinitionModelImpl._setOriginalGroupId = false;

		reportDefinitionModelImpl._originalCompanyId = reportDefinitionModelImpl._companyId;

		reportDefinitionModelImpl._setOriginalCompanyId = false;

		reportDefinitionModelImpl._setModifiedDate = false;

		reportDefinitionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ReportDefinition> toCacheModel() {
		ReportDefinitionCacheModel reportDefinitionCacheModel = new ReportDefinitionCacheModel();

		reportDefinitionCacheModel.uuid = getUuid();

		String uuid = reportDefinitionCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			reportDefinitionCacheModel.uuid = null;
		}

		reportDefinitionCacheModel.reportDefinitionId = getReportDefinitionId();

		reportDefinitionCacheModel.groupId = getGroupId();

		reportDefinitionCacheModel.companyId = getCompanyId();

		reportDefinitionCacheModel.userId = getUserId();

		reportDefinitionCacheModel.userName = getUserName();

		String userName = reportDefinitionCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			reportDefinitionCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			reportDefinitionCacheModel.createDate = createDate.getTime();
		}
		else {
			reportDefinitionCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			reportDefinitionCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			reportDefinitionCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		reportDefinitionCacheModel.columnsDDMContentId = getColumnsDDMContentId();

		reportDefinitionCacheModel.dataDefinitionId = getDataDefinitionId();

		reportDefinitionCacheModel.description = getDescription();

		String description = reportDefinitionCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			reportDefinitionCacheModel.description = null;
		}

		reportDefinitionCacheModel.name = getName();

		String name = reportDefinitionCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			reportDefinitionCacheModel.name = null;
		}

		return reportDefinitionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", reportDefinitionId=");
		sb.append(getReportDefinitionId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", columnsDDMContentId=");
		sb.append(getColumnsDDMContentId());
		sb.append(", dataDefinitionId=");
		sb.append(getDataDefinitionId());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", name=");
		sb.append(getName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("com.liferay.report.definitions.model.ReportDefinition");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reportDefinitionId</column-name><column-value><![CDATA[");
		sb.append(getReportDefinitionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>columnsDDMContentId</column-name><column-value><![CDATA[");
		sb.append(getColumnsDDMContentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dataDefinitionId</column-name><column-value><![CDATA[");
		sb.append(getDataDefinitionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ReportDefinition.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ReportDefinition.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _reportDefinitionId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _columnsDDMContentId;
	private long _dataDefinitionId;
	private String _description;
	private String _name;
	private long _columnBitmask;
	private ReportDefinition _escapedModel;
}